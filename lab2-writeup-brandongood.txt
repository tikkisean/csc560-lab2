We used the provided aggregate operator implementation, and a standard nested-loop join. I'm really curious how performant this is within the confines of Go! I know it won't be as good as a more performant algorithm, however, we were working on a tight time constraint due to other obligations so we were looking for correctness first via the test cases. We did add support for distinct in project_op.go, implemented by using an array of the tuples we had already returned. I would've loved to use a map-like structure, however, we didn't find an elegant way to store the structs. We did run into one problem where the scoping of different variables caused unexpected changes to array values, but we were able to work through those utilizing the debugger. I really enjoyed implementing the Sort interface and thought that that was a great use of Go constructs within the project! 

We did not make any changes to the API.

We did not end up passing the Easy Parser tests -- I think  there is a deeper rooted problem somewhere that the test cases aren't teasing out. However, we did pass 74/75 points in the autograder within 1 day. Sean and I had a lot of unexpected work come up this week (I had to travel to the east coast for work last minute) so it was difficult to make the time. 