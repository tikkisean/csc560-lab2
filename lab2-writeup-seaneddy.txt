We used the provided aggregate operator implementation, and the standard nested-loop join. I know this kind of join is not the most efficient, but we were not concerned with getting the most efficient join implementation for this assignment. We did add support for Distinct in project_op.go, our approach was to use an array of tuples to keep track of which tuples had already been returned. This allowed for a simple check to see whether a tuple was already in our internal array, however we ran into some bugs where tuples were being passed by reference. We ultimately had to create deep copies of some of the tuple's fields in order for our implementation to succeed. Generally we tried to follow the comments provided as closely as possible and rely on existing implementations from lab1 or from the standard library (Go's sort package). 

We did not make any changes to the API.

Our code is mostly complete, however there are a few areas for improvement. As mentioned above we did not go for the extra credit in the join implementation so the efficiency of that algorithm could be improved. Also, we did not pass all test cases against catalog.txt. We found these test cases particularly challenging to debug given the complexity of the file/operations. However, our code passes all other test cases, and we incorporated the optional Distinct functionality into the project algorithm.

We were able to complete this lab in just one day, I worked together with Brandon Good to complete the lab. As outlined in my lab1 writeup we learned we worked most effectively in pairs so chose to complete the entire lab together. Brandon's background with Go from his job helped expedite the development process, and pair programming allowed us to quickly find bugs in each other's code. Some of my annoyances with the lab are shared with the last lab, in that it's often difficult to interpret code when you must traverse many layers of type definitions and iota declarations scattered across numerous files, but I understand some of this is just inherent to working on a large project.